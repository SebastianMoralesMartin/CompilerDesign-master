Program
  defList
    funDef
      identifier {IDENTIFIER, "main", @(6, 1)}
      idList
      varDefList
      stmtList
        funCall
          identifier {IDENTIFIER, "prints", @(7, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""hello, world\n"", @(7, 12)}
        stmtEmpty {SEMICOLON, ";", @(7, 29)}
        stmtReturn {RETURN, "return", @(8, 5)}
          expr
            lit
              INT {INT, "42", @(8, 12)}
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/002_binary.falak
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
case INC Current: INC
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: CHARACTER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
Program
  defList
    funDef
      identifier {IDENTIFIER, "reverse", @(7, 1)}
      idList
        identifier {IDENTIFIER, "array", @(7, 9)}
      varDefList
        varDef {VAR, "var", @(8, 5)}
          idList
            identifier {IDENTIFIER, "start", @(8, 9)}
            identifier {IDENTIFIER, "finish", @(8, 16)}
            identifier {IDENTIFIER, "temp", @(8, 24)}
      stmtList
        assign {ASSIGN, "=", @(9, 11)}
          identifier {IDENTIFIER, "start", @(9, 5)}
          expr
            lit
              INT {INT, "0", @(9, 13)}
        stmtEmpty {SEMICOLON, ";", @(9, 14)}
        assign {ASSIGN, "=", @(10, 12)}
          identifier {IDENTIFIER, "finish", @(10, 5)}
          expr
            Positive {PLUS, "+", @(10, 26)}
              lit
                INT {INT, "1", @(10, 28)}
        stmtEmpty {SEMICOLON, ";", @(10, 29)}
        stmtWhile {WHILE, "while", @(11, 5)}
          expr
            less_than {LESS_THAN, "<", @(11, 18)}
              identifier {IDENTIFIER, "start", @(11, 12)}
              identifier {IDENTIFIER, "finish", @(11, 20)}
          stmtList
            assign {ASSIGN, "=", @(12, 14)}
              identifier {IDENTIFIER, "temp", @(12, 9)}
              expr
                identifier {IDENTIFIER, "get", @(12, 16)}
                  exprFunCall
                    exprList
                      expr
                        identifier {IDENTIFIER, "array", @(12, 20)}
                      expr
                        identifier {IDENTIFIER, "start", @(12, 27)}
            stmtEmpty {SEMICOLON, ";", @(12, 33)}
            funCall
              identifier {IDENTIFIER, "set", @(13, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "array", @(13, 13)}
                expr
                  identifier {IDENTIFIER, "start", @(13, 20)}
                expr
                  identifier {IDENTIFIER, "get", @(13, 27)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "array", @(13, 31)}
                        expr
                          identifier {IDENTIFIER, "finish", @(13, 38)}
            stmtEmpty {SEMICOLON, ";", @(13, 46)}
            funCall
              identifier {IDENTIFIER, "set", @(14, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "array", @(14, 13)}
                expr
                  identifier {IDENTIFIER, "finish", @(14, 20)}
                expr
                  identifier {IDENTIFIER, "temp", @(14, 28)}
            stmtEmpty {SEMICOLON, ";", @(14, 33)}
            stmtIncr {INC, "inc", @(15, 9)}
              identifier {IDENTIFIER, "start", @(15, 13)}
            stmtDecr {DEC, "dec", @(16, 9)}
              identifier {IDENTIFIER, "finish", @(16, 13)}
    funDef
      identifier {IDENTIFIER, "binary", @(21, 1)}
      idList
        identifier {IDENTIFIER, "num", @(21, 8)}
      varDefList
        varDef {VAR, "var", @(22, 5)}
          idList
            identifier {IDENTIFIER, "result", @(22, 9)}
            identifier {IDENTIFIER, "remainder", @(22, 17)}
      stmtList
        stmtIf {IF, "if", @(23, 5)}
          expr
            less_equal_than {LESS_EQUAL_THAN, "<=", @(23, 13)}
              identifier {IDENTIFIER, "num", @(23, 9)}
              lit
                INT {INT, "0", @(23, 16)}
          stmtList
            stmtReturn {RETURN, "return", @(24, 9)}
              expr
                lit
                  STRING {STRING, ""0"", @(24, 16)}
        assign {ASSIGN, "=", @(26, 12)}
          identifier {IDENTIFIER, "result", @(26, 5)}
          expr
            lit
              STRING {STRING, """", @(26, 14)}
        stmtEmpty {SEMICOLON, ";", @(26, 16)}
        stmtWhile {WHILE, "while", @(27, 5)}
          expr
            greater_than {GREATER_THAN, ">", @(27, 16)}
              identifier {IDENTIFIER, "num", @(27, 12)}
              lit
                INT {INT, "0", @(27, 18)}
          stmtList
            assign {ASSIGN, "=", @(28, 19)}
              identifier {IDENTIFIER, "remainder", @(28, 9)}
              expr
                Remainder {REMAINDER, "%", @(28, 25)}
                  identifier {IDENTIFIER, "num", @(28, 21)}
                  lit
                    INT {INT, "2", @(28, 27)}
            stmtEmpty {SEMICOLON, ";", @(28, 28)}
            funCall
              identifier {IDENTIFIER, "add", @(29, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "result", @(29, 13)}
                expr
                  Positive {PLUS, "+", @(29, 31)}
                    lit
                      Character {CHARACTER, "'0'", @(29, 33)}
            stmtEmpty {SEMICOLON, ";", @(29, 37)}
            assign {ASSIGN, "=", @(30, 13)}
              identifier {IDENTIFIER, "num", @(30, 9)}
              expr
                Div {DIV, "/", @(30, 19)}
                  identifier {IDENTIFIER, "num", @(30, 15)}
                  lit
                    INT {INT, "2", @(30, 21)}
            stmtEmpty {SEMICOLON, ";", @(30, 22)}
        funCall
          identifier {IDENTIFIER, "reverse", @(32, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "result", @(32, 13)}
        stmtEmpty {SEMICOLON, ";", @(32, 20)}
        stmtReturn {RETURN, "return", @(33, 5)}
          expr
            identifier {IDENTIFIER, "result", @(33, 12)}
    funDef
      identifier {IDENTIFIER, "main", @(36, 1)}
      idList
      varDefList
        varDef {VAR, "var", @(37, 5)}
          idList
            identifier {IDENTIFIER, "option", @(37, 9)}
            identifier {IDENTIFIER, "num", @(37, 17)}
      stmtList
        stmtDoWhile {DO, "do", @(38, 5)}
          stmtList
            funCall
              identifier {IDENTIFIER, "prints", @(39, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Input a number: "", @(39, 16)}
            stmtEmpty {SEMICOLON, ";", @(39, 35)}
            assign {ASSIGN, "=", @(40, 13)}
              identifier {IDENTIFIER, "num", @(40, 9)}
              expr
                identifier {IDENTIFIER, "readi", @(40, 15)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(40, 22)}
            funCall
              identifier {IDENTIFIER, "prints", @(41, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Conversion to binary of that number: "", @(41, 16)}
            stmtEmpty {SEMICOLON, ";", @(41, 56)}
            funCall
              identifier {IDENTIFIER, "prints", @(42, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "binary", @(42, 16)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "num", @(42, 23)}
            stmtEmpty {SEMICOLON, ";", @(42, 28)}
            funCall
              identifier {IDENTIFIER, "println", @(43, 9)}
              exprList
            stmtEmpty {SEMICOLON, ";", @(43, 18)}
            funCall
              identifier {IDENTIFIER, "prints", @(44, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Convert another number? "", @(44, 16)}
            stmtEmpty {SEMICOLON, ";", @(44, 43)}
            assign {ASSIGN, "=", @(45, 16)}
              identifier {IDENTIFIER, "option", @(45, 9)}
              expr
                identifier {IDENTIFIER, "reads", @(45, 18)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(45, 25)}
            stmtIf {IF, "if", @(46, 9)}
              expr
                equals_to {EQUALS_TO, "==", @(46, 26)}
                  identifier {IDENTIFIER, "size", @(46, 13)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "option", @(46, 18)}
                  lit
                    INT {INT, "0", @(46, 29)}
              stmtList
                assign {ASSIGN, "=", @(47, 20)}
                  identifier {IDENTIFIER, "option", @(47, 13)}
                  expr
                    lit
                      Character {CHARACTER, "'N'", @(47, 22)}
                stmtEmpty {SEMICOLON, ";", @(47, 25)}
              stmtElse {ELSE, "else", @(48, 11)}
                stmtList
                  assign {ASSIGN, "=", @(49, 20)}
                    identifier {IDENTIFIER, "option", @(49, 13)}
                    expr
                      identifier {IDENTIFIER, "get", @(49, 22)}
                        exprFunCall
                          exprList
                            expr
                              identifier {IDENTIFIER, "option", @(49, 26)}
                            expr
                              lit
                                INT {INT, "0", @(49, 34)}
                  stmtEmpty {SEMICOLON, ";", @(49, 36)}
          expr
            Or {OR, "||", @(51, 28)}
              equals_to {EQUALS_TO, "==", @(51, 21)}
                identifier {IDENTIFIER, "option", @(51, 14)}
                lit
                  Character {CHARACTER, "'Y'", @(51, 24)}
              equals_to {EQUALS_TO, "==", @(51, 38)}
                identifier {IDENTIFIER, "option", @(51, 31)}
                lit
                  Character {CHARACTER, "'y'", @(51, 41)}
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/003
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

Could not find file "/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78/Lexicon_Tests/003"
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/003_palidrome.falak
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: NOT_EQUAL
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: FALSE
EQUALSTO before Switch case Current: SEMICOLON
case INC Current: INC
expr running Current: TRUE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: NOT
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: CHARACTER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
Program
  defList
    funDef
      identifier {IDENTIFIER, "is_palindrome", @(7, 1)}
      idList
        identifier {IDENTIFIER, "str", @(7, 15)}
      varDefList
        varDef {VAR, "var", @(8, 5)}
          idList
            identifier {IDENTIFIER, "start", @(8, 9)}
            identifier {IDENTIFIER, "finish", @(8, 16)}
      stmtList
        assign {ASSIGN, "=", @(9, 11)}
          identifier {IDENTIFIER, "start", @(9, 5)}
          expr
            lit
              INT {INT, "0", @(9, 13)}
        stmtEmpty {SEMICOLON, ";", @(9, 14)}
        assign {ASSIGN, "=", @(10, 12)}
          identifier {IDENTIFIER, "finish", @(10, 5)}
          expr
            Negative {NEG, "-", @(10, 24)}
              lit
                INT {INT, "1", @(10, 26)}
        stmtEmpty {SEMICOLON, ";", @(10, 27)}
        stmtWhile {WHILE, "while", @(11, 5)}
          expr
            less_than {LESS_THAN, "<", @(11, 18)}
              identifier {IDENTIFIER, "start", @(11, 12)}
              identifier {IDENTIFIER, "finish", @(11, 20)}
          stmtList
            stmtIf {IF, "if", @(12, 9)}
              expr
                not_equal {NOT_EQUAL, "!=", @(12, 29)}
                  identifier {IDENTIFIER, "get", @(12, 13)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "str", @(12, 17)}
                        expr
                          identifier {IDENTIFIER, "start", @(12, 22)}
                  identifier {IDENTIFIER, "get", @(12, 32)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "str", @(12, 36)}
                        expr
                          identifier {IDENTIFIER, "finish", @(12, 41)}
              stmtList
                stmtReturn {RETURN, "return", @(13, 13)}
                  expr
                    lit
                      FALSE {FALSE, "false", @(13, 20)}
            stmtIncr {INC, "inc", @(15, 9)}
              identifier {IDENTIFIER, "start", @(15, 13)}
            stmtDecr {DEC, "dec", @(16, 9)}
              identifier {IDENTIFIER, "finish", @(16, 13)}
        stmtReturn {RETURN, "return", @(18, 5)}
          expr
            lit
              TRUE {TRUE, "true", @(18, 12)}
    funDef
      identifier {IDENTIFIER, "main", @(21, 1)}
      idList
      varDefList
        varDef {VAR, "var", @(22, 5)}
          idList
            identifier {IDENTIFIER, "str", @(22, 9)}
            identifier {IDENTIFIER, "option", @(22, 14)}
      stmtList
        stmtDoWhile {DO, "do", @(23, 5)}
          stmtList
            funCall
              identifier {IDENTIFIER, "prints", @(24, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Input a string: "", @(24, 16)}
            stmtEmpty {SEMICOLON, ";", @(24, 35)}
            assign {ASSIGN, "=", @(25, 13)}
              identifier {IDENTIFIER, "str", @(25, 9)}
              expr
                identifier {IDENTIFIER, "reads", @(25, 15)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(25, 22)}
            funCall
              identifier {IDENTIFIER, "prints", @(26, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""The string \""", @(26, 16)}
            stmtEmpty {SEMICOLON, ";", @(26, 32)}
            funCall
              identifier {IDENTIFIER, "prints", @(27, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "str", @(27, 16)}
            stmtEmpty {SEMICOLON, ";", @(27, 20)}
            funCall
              identifier {IDENTIFIER, "prints", @(28, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""\" is "", @(28, 16)}
            stmtEmpty {SEMICOLON, ";", @(28, 25)}
            stmtIf {IF, "if", @(29, 9)}
              expr
                Not {NOT, "!", @(29, 13)}
                  identifier {IDENTIFIER, "is_palindrome", @(29, 14)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "str", @(29, 28)}
              stmtList
                funCall
                  identifier {IDENTIFIER, "prints", @(30, 13)}
                  exprList
                    expr
                      lit
                        STRING {STRING, ""NOT "", @(30, 20)}
                stmtEmpty {SEMICOLON, ";", @(30, 27)}
            funCall
              identifier {IDENTIFIER, "prints", @(32, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""a palindrome.\n"", @(32, 16)}
            stmtEmpty {SEMICOLON, ";", @(32, 34)}
            funCall
              identifier {IDENTIFIER, "prints", @(33, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Check another string? "", @(33, 16)}
            stmtEmpty {SEMICOLON, ";", @(33, 41)}
            assign {ASSIGN, "=", @(34, 16)}
              identifier {IDENTIFIER, "option", @(34, 9)}
              expr
                identifier {IDENTIFIER, "reads", @(34, 18)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(34, 25)}
            stmtIf {IF, "if", @(35, 9)}
              expr
                equals_to {EQUALS_TO, "==", @(35, 26)}
                  identifier {IDENTIFIER, "size", @(35, 13)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "option", @(35, 18)}
                  lit
                    INT {INT, "0", @(35, 29)}
              stmtList
                assign {ASSIGN, "=", @(36, 20)}
                  identifier {IDENTIFIER, "option", @(36, 13)}
                  expr
                    lit
                      Character {CHARACTER, "'N'", @(36, 22)}
                stmtEmpty {SEMICOLON, ";", @(36, 25)}
              stmtElse {ELSE, "else", @(37, 11)}
                stmtList
                  assign {ASSIGN, "=", @(38, 20)}
                    identifier {IDENTIFIER, "option", @(38, 13)}
                    expr
                      identifier {IDENTIFIER, "get", @(38, 22)}
                        exprFunCall
                          exprList
                            expr
                              identifier {IDENTIFIER, "option", @(38, 26)}
                            expr
                              lit
                                INT {INT, "0", @(38, 34)}
                  stmtEmpty {SEMICOLON, ";", @(38, 36)}
          expr
            Or {OR, "||", @(40, 28)}
              equals_to {EQUALS_TO, "==", @(40, 21)}
                identifier {IDENTIFIER, "option", @(40, 14)}
                lit
                  Character {CHARACTER, "'Y'", @(40, 24)}
              equals_to {EQUALS_TO, "==", @(40, 38)}
                identifier {IDENTIFIER, "option", @(40, 31)}
                lit
                  Character {CHARACTER, "'y'", @(40, 41)}
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/004_factorials.falak
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
case INC Current: INC
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: CHARACTER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
Program
  defList
    funDef
      identifier {IDENTIFIER, "iterative_factorial", @(7, 1)}
      idList
        identifier {IDENTIFIER, "n", @(7, 21)}
      varDefList
        varDef {VAR, "var", @(8, 5)}
          idList
            identifier {IDENTIFIER, "result", @(8, 9)}
            identifier {IDENTIFIER, "i", @(8, 17)}
      stmtList
        assign {ASSIGN, "=", @(9, 12)}
          identifier {IDENTIFIER, "result", @(9, 5)}
          expr
            lit
              INT {INT, "1", @(9, 14)}
        stmtEmpty {SEMICOLON, ";", @(9, 15)}
        assign {ASSIGN, "=", @(10, 7)}
          identifier {IDENTIFIER, "i", @(10, 5)}
          expr
            lit
              INT {INT, "2", @(10, 9)}
        stmtEmpty {SEMICOLON, ";", @(10, 10)}
        stmtWhile {WHILE, "while", @(11, 5)}
          expr
            less_equal_than {LESS_EQUAL_THAN, "<=", @(11, 14)}
              identifier {IDENTIFIER, "i", @(11, 12)}
              identifier {IDENTIFIER, "n", @(11, 17)}
          stmtList
            assign {ASSIGN, "=", @(12, 16)}
              identifier {IDENTIFIER, "result", @(12, 9)}
              expr
                Mul {MUL, "*", @(12, 25)}
                  identifier {IDENTIFIER, "result", @(12, 18)}
                  identifier {IDENTIFIER, "i", @(12, 27)}
            stmtEmpty {SEMICOLON, ";", @(12, 28)}
            stmtIncr {INC, "inc", @(13, 9)}
              identifier {IDENTIFIER, "i", @(13, 13)}
        stmtReturn {RETURN, "return", @(15, 5)}
          expr
            identifier {IDENTIFIER, "result", @(15, 12)}
    funDef
      identifier {IDENTIFIER, "recursive_factorial", @(19, 1)}
      idList
        identifier {IDENTIFIER, "n", @(19, 21)}
      varDefList
      stmtList
        stmtIf {IF, "if", @(20, 5)}
          expr
            less_equal_than {LESS_EQUAL_THAN, "<=", @(20, 11)}
              identifier {IDENTIFIER, "n", @(20, 9)}
              lit
                INT {INT, "0", @(20, 14)}
          stmtList
            stmtReturn {RETURN, "return", @(21, 9)}
              expr
                lit
                  INT {INT, "1", @(21, 16)}
          stmtElse {ELSE, "else", @(22, 7)}
            stmtList
              stmtReturn {RETURN, "return", @(23, 9)}
                expr
                  Mul {MUL, "*", @(23, 18)}
                    identifier {IDENTIFIER, "n", @(23, 16)}
                    identifier {IDENTIFIER, "recursive_factorial", @(23, 20)}
                      exprFunCall
                        exprList
                          expr
                            Negative {NEG, "-", @(23, 42)}
                              lit
                                INT {INT, "1", @(23, 44)}
    funDef
      identifier {IDENTIFIER, "main", @(27, 1)}
      idList
      varDefList
        varDef {VAR, "var", @(28, 5)}
          idList
            identifier {IDENTIFIER, "num", @(28, 9)}
            identifier {IDENTIFIER, "option", @(28, 14)}
      stmtList
        stmtDoWhile {DO, "do", @(29, 5)}
          stmtList
            funCall
              identifier {IDENTIFIER, "prints", @(30, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Input a number: "", @(30, 16)}
            stmtEmpty {SEMICOLON, ";", @(30, 35)}
            assign {ASSIGN, "=", @(31, 13)}
              identifier {IDENTIFIER, "num", @(31, 9)}
              expr
                identifier {IDENTIFIER, "readi", @(31, 15)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(31, 22)}
            funCall
              identifier {IDENTIFIER, "prints", @(32, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Iterative factorial: "", @(32, 16)}
            stmtEmpty {SEMICOLON, ";", @(32, 40)}
            funCall
              identifier {IDENTIFIER, "printi", @(33, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "iterative_factorial", @(33, 16)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "num", @(33, 36)}
            stmtEmpty {SEMICOLON, ";", @(33, 41)}
            funCall
              identifier {IDENTIFIER, "println", @(34, 9)}
              exprList
            stmtEmpty {SEMICOLON, ";", @(34, 18)}
            funCall
              identifier {IDENTIFIER, "prints", @(35, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Recursive factorial: "", @(35, 16)}
            stmtEmpty {SEMICOLON, ";", @(35, 40)}
            funCall
              identifier {IDENTIFIER, "printi", @(36, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "recursive_factorial", @(36, 16)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "num", @(36, 36)}
            stmtEmpty {SEMICOLON, ";", @(36, 41)}
            funCall
              identifier {IDENTIFIER, "println", @(37, 9)}
              exprList
            stmtEmpty {SEMICOLON, ";", @(37, 18)}
            funCall
              identifier {IDENTIFIER, "prints", @(38, 9)}
              exprList
                expr
                  lit
                    STRING {STRING, ""Compute another factorial? "", @(38, 16)}
            stmtEmpty {SEMICOLON, ";", @(38, 46)}
            assign {ASSIGN, "=", @(39, 16)}
              identifier {IDENTIFIER, "option", @(39, 9)}
              expr
                identifier {IDENTIFIER, "reads", @(39, 18)}
                  exprFunCall
                    exprList
            stmtEmpty {SEMICOLON, ";", @(39, 25)}
            stmtIf {IF, "if", @(40, 9)}
              expr
                equals_to {EQUALS_TO, "==", @(40, 26)}
                  identifier {IDENTIFIER, "size", @(40, 13)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "option", @(40, 18)}
                  lit
                    INT {INT, "0", @(40, 29)}
              stmtList
                assign {ASSIGN, "=", @(41, 20)}
                  identifier {IDENTIFIER, "option", @(41, 13)}
                  expr
                    lit
                      Character {CHARACTER, "'N'", @(41, 22)}
                stmtEmpty {SEMICOLON, ";", @(41, 25)}
              stmtElse {ELSE, "else", @(42, 11)}
                stmtList
                  assign {ASSIGN, "=", @(43, 20)}
                    identifier {IDENTIFIER, "option", @(43, 13)}
                    expr
                      identifier {IDENTIFIER, "get", @(43, 22)}
                        exprFunCall
                          exprList
                            expr
                              identifier {IDENTIFIER, "option", @(43, 26)}
                            expr
                              lit
                                INT {INT, "0", @(43, 34)}
                  stmtEmpty {SEMICOLON, ";", @(43, 36)}
          expr
            Or {OR, "||", @(45, 28)}
              equals_to {EQUALS_TO, "==", @(45, 21)}
                identifier {IDENTIFIER, "option", @(45, 14)}
                lit
                  Character {CHARACTER, "'Y'", @(45, 24)}
              equals_to {EQUALS_TO, "==", @(45, 38)}
                identifier {IDENTIFIER, "option", @(45, 31)}
                lit
                  Character {CHARACTER, "'y'", @(45, 41)}
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/005_arrays.falak
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

expr running Current: TRUE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: FALSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
case INC Current: INC
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
case INC Current: INC
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
case INC Current: INC
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: FALSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: TRUE
EQUALSTO before Switch case Current: SEMICOLON
case INC Current: INC
expr running Current: NOT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
case INC Current: INC
expr running Current: BRACKET_LEFT
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: BRACKET_RIGHT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
Program
  defList
    funDef
      identifier {IDENTIFIER, "print_array", @(7, 1)}
      idList
        identifier {IDENTIFIER, "a", @(7, 13)}
      varDefList
        varDef {VAR, "var", @(8, 5)}
          idList
            identifier {IDENTIFIER, "first", @(8, 9)}
            identifier {IDENTIFIER, "i", @(8, 16)}
            identifier {IDENTIFIER, "n", @(8, 19)}
      stmtList
        assign {ASSIGN, "=", @(9, 11)}
          identifier {IDENTIFIER, "first", @(9, 5)}
          expr
            lit
              TRUE {TRUE, "true", @(9, 13)}
        stmtEmpty {SEMICOLON, ";", @(9, 17)}
        funCall
          identifier {IDENTIFIER, "printc", @(10, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "'['", @(10, 12)}
        stmtEmpty {SEMICOLON, ";", @(10, 16)}
        assign {ASSIGN, "=", @(11, 7)}
          identifier {IDENTIFIER, "i", @(11, 5)}
          expr
            lit
              INT {INT, "0", @(11, 9)}
        stmtEmpty {SEMICOLON, ";", @(11, 10)}
        assign {ASSIGN, "=", @(12, 7)}
          identifier {IDENTIFIER, "n", @(12, 5)}
          expr
            identifier {IDENTIFIER, "size", @(12, 9)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "a", @(12, 14)}
        stmtEmpty {SEMICOLON, ";", @(12, 16)}
        stmtWhile {WHILE, "while", @(13, 5)}
          expr
            less_than {LESS_THAN, "<", @(13, 14)}
              identifier {IDENTIFIER, "i", @(13, 12)}
              identifier {IDENTIFIER, "n", @(13, 16)}
          stmtList
            stmtIf {IF, "if", @(14, 9)}
              expr
                identifier {IDENTIFIER, "first", @(14, 13)}
              stmtList
                assign {ASSIGN, "=", @(15, 19)}
                  identifier {IDENTIFIER, "first", @(15, 13)}
                  expr
                    lit
                      FALSE {FALSE, "false", @(15, 21)}
                stmtEmpty {SEMICOLON, ";", @(15, 26)}
              stmtElse {ELSE, "else", @(16, 11)}
                stmtList
                  funCall
                    identifier {IDENTIFIER, "prints", @(17, 13)}
                    exprList
                      expr
                        lit
                          STRING {STRING, "", "", @(17, 20)}
                  stmtEmpty {SEMICOLON, ";", @(17, 25)}
            funCall
              identifier {IDENTIFIER, "printi", @(19, 9)}
              exprList
                expr
                  identifier {IDENTIFIER, "get", @(19, 16)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "a", @(19, 20)}
                        expr
                          identifier {IDENTIFIER, "i", @(19, 23)}
            stmtEmpty {SEMICOLON, ";", @(19, 26)}
            stmtIncr {INC, "inc", @(20, 9)}
              identifier {IDENTIFIER, "i", @(20, 13)}
        funCall
          identifier {IDENTIFIER, "printc", @(22, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "']'", @(22, 12)}
        stmtEmpty {SEMICOLON, ";", @(22, 16)}
    funDef
      identifier {IDENTIFIER, "sum_array", @(26, 1)}
      idList
        identifier {IDENTIFIER, "a", @(26, 11)}
      varDefList
        varDef {VAR, "var", @(27, 5)}
          idList
            identifier {IDENTIFIER, "sum", @(27, 9)}
            identifier {IDENTIFIER, "i", @(27, 14)}
            identifier {IDENTIFIER, "n", @(27, 17)}
      stmtList
        assign {ASSIGN, "=", @(28, 9)}
          identifier {IDENTIFIER, "sum", @(28, 5)}
          expr
            lit
              INT {INT, "0", @(28, 11)}
        stmtEmpty {SEMICOLON, ";", @(28, 12)}
        assign {ASSIGN, "=", @(29, 7)}
          identifier {IDENTIFIER, "i", @(29, 5)}
          expr
            lit
              INT {INT, "0", @(29, 9)}
        stmtEmpty {SEMICOLON, ";", @(29, 10)}
        assign {ASSIGN, "=", @(30, 7)}
          identifier {IDENTIFIER, "n", @(30, 5)}
          expr
            identifier {IDENTIFIER, "size", @(30, 9)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "a", @(30, 14)}
        stmtEmpty {SEMICOLON, ";", @(30, 16)}
        stmtWhile {WHILE, "while", @(31, 5)}
          expr
            less_than {LESS_THAN, "<", @(31, 14)}
              identifier {IDENTIFIER, "i", @(31, 12)}
              identifier {IDENTIFIER, "n", @(31, 16)}
          stmtList
            assign {ASSIGN, "=", @(32, 13)}
              identifier {IDENTIFIER, "sum", @(32, 9)}
              expr
                Positive {PLUS, "+", @(32, 19)}
                  identifier {IDENTIFIER, "get", @(32, 21)}
                    exprFunCall
                      exprList
                        expr
                          identifier {IDENTIFIER, "a", @(32, 25)}
                        expr
                          identifier {IDENTIFIER, "i", @(32, 28)}
            stmtEmpty {SEMICOLON, ";", @(32, 30)}
            stmtIncr {INC, "inc", @(33, 9)}
              identifier {IDENTIFIER, "i", @(33, 13)}
        stmtReturn {RETURN, "return", @(35, 5)}
          expr
            identifier {IDENTIFIER, "sum", @(35, 12)}
    funDef
      identifier {IDENTIFIER, "max_array", @(39, 1)}
      idList
        identifier {IDENTIFIER, "a", @(39, 11)}
      varDefList
        varDef {VAR, "var", @(40, 5)}
          idList
            identifier {IDENTIFIER, "max", @(40, 9)}
            identifier {IDENTIFIER, "i", @(40, 14)}
            identifier {IDENTIFIER, "n", @(40, 17)}
            identifier {IDENTIFIER, "x", @(40, 20)}
      stmtList
        assign {ASSIGN, "=", @(41, 9)}
          identifier {IDENTIFIER, "max", @(41, 5)}
          expr
            identifier {IDENTIFIER, "get", @(41, 11)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "a", @(41, 15)}
                  expr
                    lit
                      INT {INT, "0", @(41, 18)}
        stmtEmpty {SEMICOLON, ";", @(41, 20)}
        assign {ASSIGN, "=", @(42, 7)}
          identifier {IDENTIFIER, "i", @(42, 5)}
          expr
            lit
              INT {INT, "0", @(42, 9)}
        stmtEmpty {SEMICOLON, ";", @(42, 10)}
        assign {ASSIGN, "=", @(43, 7)}
          identifier {IDENTIFIER, "n", @(43, 5)}
          expr
            identifier {IDENTIFIER, "size", @(43, 9)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "a", @(43, 14)}
        stmtEmpty {SEMICOLON, ";", @(43, 16)}
        stmtWhile {WHILE, "while", @(44, 5)}
          expr
            less_than {LESS_THAN, "<", @(44, 14)}
              identifier {IDENTIFIER, "i", @(44, 12)}
              identifier {IDENTIFIER, "n", @(44, 16)}
          stmtList
            assign {ASSIGN, "=", @(45, 11)}
              identifier {IDENTIFIER, "x", @(45, 9)}
              expr
                identifier {IDENTIFIER, "get", @(45, 13)}
                  exprFunCall
                    exprList
                      expr
                        identifier {IDENTIFIER, "a", @(45, 17)}
                      expr
                        identifier {IDENTIFIER, "i", @(45, 20)}
            stmtEmpty {SEMICOLON, ";", @(45, 22)}
            stmtIf {IF, "if", @(46, 9)}
              expr
                greater_than {GREATER_THAN, ">", @(46, 15)}
                  identifier {IDENTIFIER, "x", @(46, 13)}
                  identifier {IDENTIFIER, "max", @(46, 17)}
              stmtList
                assign {ASSIGN, "=", @(47, 17)}
                  identifier {IDENTIFIER, "max", @(47, 13)}
                  expr
                    identifier {IDENTIFIER, "x", @(47, 19)}
                stmtEmpty {SEMICOLON, ";", @(47, 20)}
            stmtIncr {INC, "inc", @(49, 9)}
              identifier {IDENTIFIER, "i", @(49, 13)}
        stmtReturn {RETURN, "return", @(51, 5)}
          expr
            identifier {IDENTIFIER, "max", @(51, 12)}
    funDef
      identifier {IDENTIFIER, "sort_array", @(55, 1)}
      idList
        identifier {IDENTIFIER, "a", @(55, 12)}
      varDefList
        varDef {VAR, "var", @(56, 5)}
          idList
            identifier {IDENTIFIER, "i", @(56, 9)}
            identifier {IDENTIFIER, "j", @(56, 12)}
            identifier {IDENTIFIER, "t", @(56, 15)}
            identifier {IDENTIFIER, "n", @(56, 18)}
            identifier {IDENTIFIER, "swap", @(56, 21)}
      stmtList
        assign {ASSIGN, "=", @(57, 7)}
          identifier {IDENTIFIER, "n", @(57, 5)}
          expr
            identifier {IDENTIFIER, "size", @(57, 9)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "a", @(57, 14)}
        stmtEmpty {SEMICOLON, ";", @(57, 16)}
        assign {ASSIGN, "=", @(58, 7)}
          identifier {IDENTIFIER, "i", @(58, 5)}
          expr
            lit
              INT {INT, "0", @(58, 9)}
        stmtEmpty {SEMICOLON, ";", @(58, 10)}
        stmtWhile {WHILE, "while", @(59, 5)}
          expr
            less_than {LESS_THAN, "<", @(59, 14)}
              identifier {IDENTIFIER, "i", @(59, 12)}
              Negative {NEG, "-", @(59, 18)}
                lit
                  INT {INT, "1", @(59, 20)}
          stmtList
            assign {ASSIGN, "=", @(60, 11)}
              identifier {IDENTIFIER, "j", @(60, 9)}
              expr
                lit
                  INT {INT, "0", @(60, 13)}
            stmtEmpty {SEMICOLON, ";", @(60, 14)}
            assign {ASSIGN, "=", @(61, 14)}
              identifier {IDENTIFIER, "swap", @(61, 9)}
              expr
                lit
                  FALSE {FALSE, "false", @(61, 16)}
            stmtEmpty {SEMICOLON, ";", @(61, 21)}
            stmtWhile {WHILE, "while", @(62, 9)}
              expr
                less_than {LESS_THAN, "<", @(62, 18)}
                  identifier {IDENTIFIER, "j", @(62, 16)}
                  Minus {NEG, "-", @(62, 26)}
                    Negative {NEG, "-", @(62, 22)}
                      identifier {IDENTIFIER, "i", @(62, 24)}
                    lit
                      INT {INT, "1", @(62, 28)}
              stmtList
                stmtIf {IF, "if", @(63, 13)}
                  expr
                    greater_than {GREATER_THAN, ">", @(63, 27)}
                      identifier {IDENTIFIER, "get", @(63, 17)}
                        exprFunCall
                          exprList
                            expr
                              identifier {IDENTIFIER, "a", @(63, 21)}
                            expr
                              identifier {IDENTIFIER, "j", @(63, 24)}
                      identifier {IDENTIFIER, "get", @(63, 29)}
                        exprFunCall
                          exprList
                            expr
                              identifier {IDENTIFIER, "a", @(63, 33)}
                            expr
                              Positive {PLUS, "+", @(63, 38)}
                                lit
                                  INT {INT, "1", @(63, 40)}
                  stmtList
                    assign {ASSIGN, "=", @(64, 19)}
                      identifier {IDENTIFIER, "t", @(64, 17)}
                      expr
                        identifier {IDENTIFIER, "get", @(64, 21)}
                          exprFunCall
                            exprList
                              expr
                                identifier {IDENTIFIER, "a", @(64, 25)}
                              expr
                                identifier {IDENTIFIER, "j", @(64, 28)}
                    stmtEmpty {SEMICOLON, ";", @(64, 30)}
                    funCall
                      identifier {IDENTIFIER, "set", @(65, 17)}
                      exprList
                        expr
                          identifier {IDENTIFIER, "a", @(65, 21)}
                        expr
                          identifier {IDENTIFIER, "j", @(65, 24)}
                        expr
                          identifier {IDENTIFIER, "get", @(65, 27)}
                            exprFunCall
                              exprList
                                expr
                                  identifier {IDENTIFIER, "a", @(65, 31)}
                                expr
                                  Positive {PLUS, "+", @(65, 36)}
                                    lit
                                      INT {INT, "1", @(65, 38)}
                    stmtEmpty {SEMICOLON, ";", @(65, 41)}
                    funCall
                      identifier {IDENTIFIER, "set", @(66, 17)}
                      exprList
                        expr
                          identifier {IDENTIFIER, "a", @(66, 21)}
                        expr
                          Positive {PLUS, "+", @(66, 26)}
                            lit
                              INT {INT, "1", @(66, 28)}
                        expr
                          identifier {IDENTIFIER, "t", @(66, 31)}
                    stmtEmpty {SEMICOLON, ";", @(66, 33)}
                    assign {ASSIGN, "=", @(67, 22)}
                      identifier {IDENTIFIER, "swap", @(67, 17)}
                      expr
                        lit
                          TRUE {TRUE, "true", @(67, 24)}
                    stmtEmpty {SEMICOLON, ";", @(67, 28)}
                stmtIncr {INC, "inc", @(69, 13)}
                  identifier {IDENTIFIER, "j", @(69, 17)}
            stmtIf {IF, "if", @(71, 9)}
              expr
                Not {NOT, "!", @(71, 13)}
                  identifier {IDENTIFIER, "swap", @(71, 14)}
              stmtList
                stmtBreak {BREAK, "break", @(72, 13)}
            stmtIncr {INC, "inc", @(74, 9)}
              identifier {IDENTIFIER, "i", @(74, 13)}
    funDef
      identifier {IDENTIFIER, "main", @(78, 1)}
      idList
      varDefList
        varDef {VAR, "var", @(79, 5)}
          idList
            identifier {IDENTIFIER, "array", @(79, 9)}
            identifier {IDENTIFIER, "sum", @(79, 16)}
            identifier {IDENTIFIER, "max", @(79, 21)}
      stmtList
        assign {ASSIGN, "=", @(80, 11)}
          identifier {IDENTIFIER, "array", @(80, 5)}
          expr
            array
              exprList
                expr
                  lit
                    INT {INT, "73", @(80, 14)}
                expr
                  lit
                    INT {INT, "77", @(80, 18)}
                expr
                  lit
                    INT {INT, "56", @(80, 22)}
                expr
                  lit
                    INT {INT, "10", @(80, 26)}
                expr
                  lit
                    INT {INT, "14", @(80, 30)}
                expr
                  lit
                    INT {INT, "54", @(81, 14)}
                expr
                  lit
                    INT {INT, "75", @(81, 18)}
                expr
                  lit
                    INT {INT, "62", @(81, 22)}
                expr
                  lit
                    INT {INT, "71", @(81, 26)}
                expr
                  lit
                    INT {INT, "10", @(81, 30)}
                expr
                  lit
                    INT {INT, "3", @(82, 15)}
                expr
                  lit
                    INT {INT, "71", @(82, 18)}
                expr
                  lit
                    INT {INT, "16", @(82, 22)}
                expr
                  lit
                    INT {INT, "49", @(82, 26)}
                expr
                  lit
                    INT {INT, "66", @(82, 30)}
                expr
                  lit
                    INT {INT, "91", @(83, 14)}
                expr
                  lit
                    INT {INT, "69", @(83, 18)}
                expr
                  lit
                    INT {INT, "62", @(83, 22)}
                expr
                  lit
                    INT {INT, "25", @(83, 26)}
                expr
                  lit
                    INT {INT, "65", @(83, 30)}
        stmtEmpty {SEMICOLON, ";", @(83, 33)}
        funCall
          identifier {IDENTIFIER, "prints", @(84, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""Original array: "", @(84, 12)}
        stmtEmpty {SEMICOLON, ";", @(84, 31)}
        funCall
          identifier {IDENTIFIER, "print_array", @(85, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "array", @(85, 17)}
        stmtEmpty {SEMICOLON, ";", @(85, 23)}
        funCall
          identifier {IDENTIFIER, "println", @(86, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(86, 14)}
        assign {ASSIGN, "=", @(87, 9)}
          identifier {IDENTIFIER, "sum", @(87, 5)}
          expr
            identifier {IDENTIFIER, "sum_array", @(87, 11)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "array", @(87, 21)}
        stmtEmpty {SEMICOLON, ";", @(87, 27)}
        assign {ASSIGN, "=", @(88, 9)}
          identifier {IDENTIFIER, "max", @(88, 5)}
          expr
            identifier {IDENTIFIER, "max_array", @(88, 11)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "array", @(88, 21)}
        stmtEmpty {SEMICOLON, ";", @(88, 27)}
        funCall
          identifier {IDENTIFIER, "prints", @(89, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""Sum of array:   "", @(89, 12)}
        stmtEmpty {SEMICOLON, ";", @(89, 31)}
        funCall
          identifier {IDENTIFIER, "printi", @(90, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "sum", @(90, 12)}
        stmtEmpty {SEMICOLON, ";", @(90, 16)}
        funCall
          identifier {IDENTIFIER, "println", @(91, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(91, 14)}
        funCall
          identifier {IDENTIFIER, "prints", @(92, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""Max of array:   "", @(92, 12)}
        stmtEmpty {SEMICOLON, ";", @(92, 31)}
        funCall
          identifier {IDENTIFIER, "printi", @(93, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "max", @(93, 12)}
        stmtEmpty {SEMICOLON, ";", @(93, 16)}
        funCall
          identifier {IDENTIFIER, "println", @(94, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(94, 14)}
        funCall
          identifier {IDENTIFIER, "sort_array", @(95, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "array", @(95, 16)}
        stmtEmpty {SEMICOLON, ";", @(95, 22)}
        funCall
          identifier {IDENTIFIER, "prints", @(96, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""Sorted array:   "", @(96, 12)}
        stmtEmpty {SEMICOLON, ";", @(96, 31)}
        funCall
          identifier {IDENTIFIER, "print_array", @(97, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "array", @(97, 17)}
        stmtEmpty {SEMICOLON, ";", @(97, 23)}
        funCall
          identifier {IDENTIFIER, "println", @(98, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(98, 14)}
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ clear
raumdeuter@MSI:/mnt/c/Users/Edumu/Downloads/CompilerDesign-master-d6d452dc48ae1b4cb297bb70b445876f8d957d78$ mono falak.exe Lexicon_Tests/006_next_day.falak
Falak compiler, version 0.3

Included in this release:
   * Lexical analysis
   * Syntactic analysis
   * AST construction

expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: TRUE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: FALSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: TRUE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: FALSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
elseIfList {ELSEIF, "elseif", @(32, 7)}
Current Should be a open parenthesis: PARENTHESIS_OPEN
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: INT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: EQUALS_TO
EQUALSTO Current: EQUALS_TO
expr running Current: BRACKET_LEFT
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: BRACKET_RIGHT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: BRACKET_LEFT
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: BRACKET_RIGHT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: BRACKET_LEFT
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: BRACKET_RIGHT
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: STRING
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: SEMICOLON
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: CHARACTER
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: IDENTIFIER
expr running Current: IDENTIFIER
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: COMMA
expr running Current: INT
EQUALSTO before Switch case Current: PARENTHESIS_CLOSE
Program
  defList
    funDef
      identifier {IDENTIFIER, "is_leap_year", @(7, 1)}
      idList
        identifier {IDENTIFIER, "y", @(7, 14)}
      varDefList
      stmtList
        stmtIf {IF, "if", @(8, 5)}
          expr
            equals_to {EQUALS_TO, "==", @(8, 15)}
              Remainder {REMAINDER, "%", @(8, 11)}
                identifier {IDENTIFIER, "y", @(8, 9)}
                lit
                  INT {INT, "4", @(8, 13)}
              lit
                INT {INT, "0", @(8, 18)}
          stmtList
            stmtIf {IF, "if", @(9, 9)}
              expr
                equals_to {EQUALS_TO, "==", @(9, 21)}
                  Remainder {REMAINDER, "%", @(9, 15)}
                    identifier {IDENTIFIER, "y", @(9, 13)}
                    lit
                      INT {INT, "100", @(9, 17)}
                  lit
                    INT {INT, "0", @(9, 24)}
              stmtList
                stmtIf {IF, "if", @(10, 13)}
                  expr
                    equals_to {EQUALS_TO, "==", @(10, 25)}
                      Remainder {REMAINDER, "%", @(10, 19)}
                        identifier {IDENTIFIER, "y", @(10, 17)}
                        lit
                          INT {INT, "400", @(10, 21)}
                      lit
                        INT {INT, "0", @(10, 28)}
                  stmtList
                    stmtReturn {RETURN, "return", @(11, 17)}
                      expr
                        lit
                          TRUE {TRUE, "true", @(11, 24)}
                  stmtElse {ELSE, "else", @(12, 15)}
                    stmtList
                      stmtReturn {RETURN, "return", @(13, 17)}
                        expr
                          lit
                            FALSE {FALSE, "false", @(13, 24)}
              stmtElse {ELSE, "else", @(15, 11)}
                stmtList
                  stmtReturn {RETURN, "return", @(16, 13)}
                    expr
                      lit
                        TRUE {TRUE, "true", @(16, 20)}
          stmtElse {ELSE, "else", @(18, 7)}
            stmtList
              stmtReturn {RETURN, "return", @(19, 9)}
                expr
                  lit
                    FALSE {FALSE, "false", @(19, 16)}
    funDef
      identifier {IDENTIFIER, "number_of_days_in_month", @(24, 1)}
      idList
        identifier {IDENTIFIER, "y", @(24, 25)}
        identifier {IDENTIFIER, "m", @(24, 28)}
      varDefList
        varDef {VAR, "var", @(25, 5)}
          idList
            identifier {IDENTIFIER, "result", @(25, 9)}
      stmtList
        stmtIf {IF, "if", @(26, 5)}
          expr
            equals_to {EQUALS_TO, "==", @(26, 11)}
              identifier {IDENTIFIER, "m", @(26, 9)}
              lit
                INT {INT, "2", @(26, 14)}
          stmtList
            stmtIf {IF, "if", @(27, 9)}
              expr
                identifier {IDENTIFIER, "is_leap_year", @(27, 13)}
                  exprFunCall
                    exprList
                      expr
                        identifier {IDENTIFIER, "y", @(27, 26)}
              stmtList
                assign {ASSIGN, "=", @(28, 20)}
                  identifier {IDENTIFIER, "result", @(28, 13)}
                  expr
                    lit
                      INT {INT, "29", @(28, 22)}
                stmtEmpty {SEMICOLON, ";", @(28, 24)}
              stmtElse {ELSE, "else", @(29, 11)}
                stmtList
                  assign {ASSIGN, "=", @(30, 20)}
                    identifier {IDENTIFIER, "result", @(30, 13)}
                    expr
                      lit
                        INT {INT, "28", @(30, 22)}
                  stmtEmpty {SEMICOLON, ";", @(30, 24)}
          elseIfList {ELSEIF, "elseif", @(32, 7)}
            expr
              Or {OR, "||", @(32, 42)}
                Or {OR, "||", @(32, 32)}
                  Or {OR, "||", @(32, 22)}
                    equals_to {EQUALS_TO, "==", @(32, 17)}
                      identifier {IDENTIFIER, "m", @(32, 15)}
                      lit
                        INT {INT, "4", @(32, 20)}
                    equals_to {EQUALS_TO, "==", @(32, 27)}
                      identifier {IDENTIFIER, "m", @(32, 25)}
                      lit
                        INT {INT, "6", @(32, 30)}
                  equals_to {EQUALS_TO, "==", @(32, 37)}
                    identifier {IDENTIFIER, "m", @(32, 35)}
                    lit
                      INT {INT, "9", @(32, 40)}
                equals_to {EQUALS_TO, "==", @(32, 47)}
                  identifier {IDENTIFIER, "m", @(32, 45)}
                  lit
                    INT {INT, "11", @(32, 50)}
            stmtList
              assign {ASSIGN, "=", @(33, 16)}
                identifier {IDENTIFIER, "result", @(33, 9)}
                expr
                  lit
                    INT {INT, "30", @(33, 18)}
              stmtEmpty {SEMICOLON, ";", @(33, 20)}
          stmtElse {ELSE, "else", @(34, 7)}
            stmtList
              assign {ASSIGN, "=", @(35, 16)}
                identifier {IDENTIFIER, "result", @(35, 9)}
                expr
                  lit
                    INT {INT, "31", @(35, 18)}
              stmtEmpty {SEMICOLON, ";", @(35, 20)}
        stmtReturn {RETURN, "return", @(37, 5)}
          expr
            identifier {IDENTIFIER, "result", @(37, 12)}
    funDef
      identifier {IDENTIFIER, "next_day", @(42, 1)}
      idList
        identifier {IDENTIFIER, "y", @(42, 10)}
        identifier {IDENTIFIER, "m", @(42, 13)}
        identifier {IDENTIFIER, "d", @(42, 16)}
      varDefList
      stmtList
        stmtIf {IF, "if", @(43, 5)}
          expr
            equals_to {EQUALS_TO, "==", @(43, 11)}
              identifier {IDENTIFIER, "d", @(43, 9)}
              identifier {IDENTIFIER, "number_of_days_in_month", @(43, 14)}
                exprFunCall
                  exprList
                    expr
                      identifier {IDENTIFIER, "y", @(43, 38)}
                    expr
                      identifier {IDENTIFIER, "m", @(43, 41)}
          stmtList
            stmtIf {IF, "if", @(44, 9)}
              expr
                equals_to {EQUALS_TO, "==", @(44, 15)}
                  identifier {IDENTIFIER, "m", @(44, 13)}
                  lit
                    INT {INT, "12", @(44, 18)}
              stmtList
                stmtReturn {RETURN, "return", @(45, 13)}
                  expr
                    array
                      exprList
                        expr
                          Positive {PLUS, "+", @(45, 23)}
                            lit
                              INT {INT, "1", @(45, 25)}
                        expr
                          lit
                            INT {INT, "1", @(45, 28)}
                        expr
                          lit
                            INT {INT, "1", @(45, 31)}
              stmtElse {ELSE, "else", @(46, 11)}
                stmtList
                  stmtReturn {RETURN, "return", @(47, 13)}
                    expr
                      array
                        exprList
                          expr
                            identifier {IDENTIFIER, "y", @(47, 21)}
                          expr
                            Positive {PLUS, "+", @(47, 26)}
                              lit
                                INT {INT, "1", @(47, 28)}
                          expr
                            lit
                              INT {INT, "1", @(47, 31)}
          stmtElse {ELSE, "else", @(49, 7)}
            stmtList
              stmtReturn {RETURN, "return", @(50, 9)}
                expr
                  array
                    exprList
                      expr
                        identifier {IDENTIFIER, "y", @(50, 17)}
                      expr
                        identifier {IDENTIFIER, "m", @(50, 20)}
                      expr
                        Positive {PLUS, "+", @(50, 25)}
                          lit
                            INT {INT, "1", @(50, 27)}
    funDef
      identifier {IDENTIFIER, "print_next_day", @(55, 1)}
      idList
        identifier {IDENTIFIER, "y", @(55, 16)}
        identifier {IDENTIFIER, "m", @(55, 19)}
        identifier {IDENTIFIER, "d", @(55, 22)}
      varDefList
        varDef {VAR, "var", @(56, 5)}
          idList
            identifier {IDENTIFIER, "next", @(56, 9)}
      stmtList
        funCall
          identifier {IDENTIFIER, "prints", @(57, 5)}
          exprList
            expr
              lit
                STRING {STRING, ""The day after "", @(57, 12)}
        stmtEmpty {SEMICOLON, ";", @(57, 29)}
        funCall
          identifier {IDENTIFIER, "printi", @(58, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "y", @(58, 12)}
        stmtEmpty {SEMICOLON, ";", @(58, 14)}
        funCall
          identifier {IDENTIFIER, "printc", @(59, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "'/'", @(59, 12)}
        stmtEmpty {SEMICOLON, ";", @(59, 16)}
        funCall
          identifier {IDENTIFIER, "printi", @(60, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "m", @(60, 12)}
        stmtEmpty {SEMICOLON, ";", @(60, 14)}
        funCall
          identifier {IDENTIFIER, "printc", @(61, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "'/'", @(61, 12)}
        stmtEmpty {SEMICOLON, ";", @(61, 16)}
        funCall
          identifier {IDENTIFIER, "printi", @(62, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "d", @(62, 12)}
        stmtEmpty {SEMICOLON, ";", @(62, 14)}
        funCall
          identifier {IDENTIFIER, "prints", @(63, 5)}
          exprList
            expr
              lit
                STRING {STRING, "" is "", @(63, 12)}
        stmtEmpty {SEMICOLON, ";", @(63, 19)}
        assign {ASSIGN, "=", @(64, 10)}
          identifier {IDENTIFIER, "next", @(64, 5)}
          expr
            identifier {IDENTIFIER, "next_day", @(64, 12)}
              exprFunCall
                exprList
                  expr
                    identifier {IDENTIFIER, "y", @(64, 21)}
                  expr
                    identifier {IDENTIFIER, "m", @(64, 24)}
                  expr
                    identifier {IDENTIFIER, "d", @(64, 27)}
        stmtEmpty {SEMICOLON, ";", @(64, 29)}
        funCall
          identifier {IDENTIFIER, "printi", @(65, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "get", @(65, 12)}
                exprFunCall
                  exprList
                    expr
                      identifier {IDENTIFIER, "next", @(65, 16)}
                    expr
                      lit
                        INT {INT, "0", @(65, 22)}
        stmtEmpty {SEMICOLON, ";", @(65, 25)}
        funCall
          identifier {IDENTIFIER, "printc", @(66, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "'/'", @(66, 12)}
        stmtEmpty {SEMICOLON, ";", @(66, 16)}
        funCall
          identifier {IDENTIFIER, "printi", @(67, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "get", @(67, 12)}
                exprFunCall
                  exprList
                    expr
                      identifier {IDENTIFIER, "next", @(67, 16)}
                    expr
                      lit
                        INT {INT, "1", @(67, 22)}
        stmtEmpty {SEMICOLON, ";", @(67, 25)}
        funCall
          identifier {IDENTIFIER, "printc", @(68, 5)}
          exprList
            expr
              lit
                Character {CHARACTER, "'/'", @(68, 12)}
        stmtEmpty {SEMICOLON, ";", @(68, 16)}
        funCall
          identifier {IDENTIFIER, "printi", @(69, 5)}
          exprList
            expr
              identifier {IDENTIFIER, "get", @(69, 12)}
                exprFunCall
                  exprList
                    expr
                      identifier {IDENTIFIER, "next", @(69, 16)}
                    expr
                      lit
                        INT {INT, "2", @(69, 22)}
        stmtEmpty {SEMICOLON, ";", @(69, 25)}
        funCall
          identifier {IDENTIFIER, "println", @(70, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(70, 14)}
    funDef
      identifier {IDENTIFIER, "main", @(73, 1)}
      idList
      varDefList
      stmtList
        funCall
          identifier {IDENTIFIER, "print_next_day", @(74, 5)}
          exprList
            expr
              lit
                INT {INT, "2020", @(74, 20)}
            expr
              lit
                INT {INT, "2", @(74, 26)}
            expr
              lit
                INT {INT, "28", @(74, 29)}
        stmtEmpty {SEMICOLON, ";", @(74, 32)}
        funCall
          identifier {IDENTIFIER, "print_next_day", @(75, 5)}
          exprList
            expr
              lit
                INT {INT, "2021", @(75, 20)}
            expr
              lit
                INT {INT, "2", @(75, 26)}
            expr
              lit
                INT {INT, "13", @(75, 29)}
        stmtEmpty {SEMICOLON, ";", @(75, 32)}
        funCall
          identifier {IDENTIFIER, "print_next_day", @(76, 5)}
          exprList
            expr
              lit
                INT {INT, "2021", @(76, 20)}
            expr
              lit
                INT {INT, "2", @(76, 26)}
            expr
              lit
                INT {INT, "28", @(76, 29)}
        stmtEmpty {SEMICOLON, ";", @(76, 32)}
        funCall
          identifier {IDENTIFIER, "print_next_day", @(77, 5)}
          exprList
            expr
              lit
                INT {INT, "2021", @(77, 20)}
            expr
              lit
                INT {INT, "12", @(77, 26)}
            expr
              lit
                INT {INT, "31", @(77, 30)}
        stmtEmpty {SEMICOLON, ";", @(77, 33)}
