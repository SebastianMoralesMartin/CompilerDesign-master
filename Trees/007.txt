Program
  defList
    varDef {VAR, "var", @(7, 1)}
      idList
        identifier {IDENTIFIER, "fails", @(7, 5)}
    funDef
      identifier {IDENTIFIER, "assert", @(9, 1)}
      idList
        identifier {IDENTIFIER, "value1", @(9, 8)}
        identifier {IDENTIFIER, "value2", @(9, 16)}
        identifier {IDENTIFIER, "message", @(9, 24)}
      varDefList
      stmtList
        stmtIf {IF, "if", @(10, 5)}
          not_equal {NOT_EQUAL, "!=", @(10, 16)}
            identifier {IDENTIFIER, "value1", @(10, 9)}
            identifier {IDENTIFIER, "value2", @(10, 19)}
          stmtList
            stmtIncr {INC, "inc", @(11, 9)}
              identifier {IDENTIFIER, "fails", @(11, 13)}
            funCall
              identifier {IDENTIFIER, "prints", @(12, 9)}
              exprList
                lit
                  STRING {STRING, ""Assertion failure: "", @(12, 16)}
            stmtEmpty {SEMICOLON, ";", @(12, 38)}
            funCall
              identifier {IDENTIFIER, "prints", @(13, 9)}
              exprList
                identifier {IDENTIFIER, "message", @(13, 16)}
            stmtEmpty {SEMICOLON, ";", @(13, 24)}
            funCall
              identifier {IDENTIFIER, "println", @(14, 9)}
              exprList
            stmtEmpty {SEMICOLON, ";", @(14, 18)}
    funDef
      identifier {IDENTIFIER, "main", @(18, 1)}
      idList
      varDefList
        varDef {VAR, "var", @(19, 5)}
          idList
            identifier {IDENTIFIER, "s", @(19, 9)}
            identifier {IDENTIFIER, "a", @(19, 12)}
            identifier {IDENTIFIER, "i", @(19, 15)}
            identifier {IDENTIFIER, "n", @(19, 18)}
      stmtList
        assign {ASSIGN, "=", @(20, 11)}
          identifier {IDENTIFIER, "fails", @(20, 5)}
          lit
            INT {INT, "0", @(20, 13)}
        stmtEmpty {SEMICOLON, ";", @(20, 14)}
        funCall
          identifier {IDENTIFIER, "assert", @(21, 5)}
          exprList
            lit
              Character {CHARACTER, "'\n'", @(21, 12)}
            lit
              INT {INT, "10", @(21, 18)}
            lit
              STRING {STRING, ""error in newline literal"", @(21, 22)}
        stmtEmpty {SEMICOLON, ";", @(21, 49)}
        funCall
          identifier {IDENTIFIER, "assert", @(22, 5)}
          exprList
            lit
              Character {CHARACTER, "'\r'", @(22, 12)}
            lit
              INT {INT, "13", @(22, 18)}
            lit
              STRING {STRING, ""error in carriage return literal"", @(22, 22)}
        stmtEmpty {SEMICOLON, ";", @(22, 57)}
        funCall
          identifier {IDENTIFIER, "assert", @(23, 5)}
          exprList
            lit
              Character {CHARACTER, "'\t'", @(23, 12)}
            lit
              INT {INT, "9", @(23, 18)}
            lit
              STRING {STRING, ""error in tab literal"", @(23, 21)}
        stmtEmpty {SEMICOLON, ";", @(23, 44)}
        funCall
          identifier {IDENTIFIER, "assert", @(24, 5)}
          exprList
            lit
              Character {CHARACTER, "'\\'", @(24, 12)}
            lit
              INT {INT, "92", @(24, 18)}
            lit
              STRING {STRING, ""error in backslash literal"", @(24, 22)}
        stmtEmpty {SEMICOLON, ";", @(24, 51)}
        funCall
          identifier {IDENTIFIER, "assert", @(25, 5)}
          exprList
            lit
              Character {CHARACTER, "'\''", @(25, 12)}
            lit
              INT {INT, "39", @(25, 18)}
            lit
              STRING {STRING, ""error in single quote literal"", @(25, 22)}
        stmtEmpty {SEMICOLON, ";", @(25, 54)}
        funCall
          identifier {IDENTIFIER, "assert", @(26, 5)}
          exprList
            lit
              Character {CHARACTER, "'\"'", @(26, 12)}
            lit
              INT {INT, "34", @(26, 18)}
            lit
              STRING {STRING, ""error in double quote literal"", @(26, 22)}
        stmtEmpty {SEMICOLON, ";", @(26, 54)}
        funCall
          identifier {IDENTIFIER, "assert", @(27, 5)}
          exprList
            lit
              Character {CHARACTER, "'\u000041'", @(27, 12)}
            lit
              Character {CHARACTER, "'A'", @(27, 24)}
            lit
              STRING {STRING, ""error in letter A literal code point"", @(27, 29)}
        stmtEmpty {SEMICOLON, ";", @(27, 68)}
        funCall
          identifier {IDENTIFIER, "assert", @(28, 5)}
          exprList
            lit
              Character {CHARACTER, "'\u0020AC'", @(28, 12)}
            lit
              INT {INT, "8364", @(28, 24)}
            lit
              STRING {STRING, ""error in euro literal code point"", @(28, 30)}
        stmtEmpty {SEMICOLON, ";", @(28, 65)}
        assign {ASSIGN, "=", @(29, 7)}
          identifier {IDENTIFIER, "s", @(29, 5)}
          lit
            STRING {STRING, ""\u0000A1\u0020ACste ni\u0000F1o \u0020ACst\u0000E1 bien \u0000D1o\u0000F1o!\n"", @(29, 9)}
        stmtEmpty {SEMICOLON, ";", @(29, 88)}
        assign {ASSIGN, "=", @(30, 7)}
          identifier {IDENTIFIER, "a", @(30, 5)}
          array
            exprList
              lit
                INT {INT, "161", @(30, 10)}
              lit
                INT {INT, "8364", @(30, 15)}
              lit
                INT {INT, "115", @(30, 21)}
              lit
                INT {INT, "116", @(30, 26)}
              lit
                INT {INT, "101", @(30, 31)}
              lit
                INT {INT, "32", @(30, 36)}
              lit
                INT {INT, "110", @(30, 40)}
              lit
                INT {INT, "105", @(30, 45)}
              lit
                INT {INT, "241", @(30, 50)}
              lit
                INT {INT, "111", @(30, 55)}
              lit
                INT {INT, "32", @(30, 60)}
              lit
                INT {INT, "8364", @(30, 64)}
              lit
                INT {INT, "115", @(31, 10)}
              lit
                INT {INT, "116", @(31, 15)}
              lit
                INT {INT, "225", @(31, 20)}
              lit
                INT {INT, "32", @(31, 25)}
              lit
                INT {INT, "98", @(31, 29)}
              lit
                INT {INT, "105", @(31, 33)}
              lit
                INT {INT, "101", @(31, 38)}
              lit
                INT {INT, "110", @(31, 43)}
              lit
                INT {INT, "32", @(31, 48)}
              lit
                INT {INT, "209", @(31, 52)}
              lit
                INT {INT, "111", @(31, 57)}
              lit
                INT {INT, "241", @(31, 62)}
              lit
                INT {INT, "111", @(31, 67)}
              lit
                INT {INT, "33", @(32, 10)}
              lit
                INT {INT, "10", @(32, 14)}
        stmtEmpty {SEMICOLON, ";", @(32, 17)}
        assign {ASSIGN, "=", @(33, 7)}
          identifier {IDENTIFIER, "i", @(33, 5)}
          lit
            INT {INT, "0", @(33, 9)}
        stmtEmpty {SEMICOLON, ";", @(33, 10)}
        assign {ASSIGN, "=", @(34, 7)}
          identifier {IDENTIFIER, "n", @(34, 5)}
          identifier {IDENTIFIER, "size", @(34, 9)}
            exprFunCall
              exprList
                identifier {IDENTIFIER, "s", @(34, 14)}
        stmtEmpty {SEMICOLON, ";", @(34, 16)}
        stmtWhile {WHILE, "while", @(35, 5)}
          less_than {LESS_THAN, "<", @(35, 14)}
            identifier {IDENTIFIER, "i", @(35, 12)}
            identifier {IDENTIFIER, "n", @(35, 16)}
          stmtList
            funCall
              identifier {IDENTIFIER, "assert", @(36, 9)}
              exprList
                identifier {IDENTIFIER, "get", @(36, 16)}
                  exprFunCall
                    exprList
                      identifier {IDENTIFIER, "a", @(36, 20)}
                      identifier {IDENTIFIER, "i", @(36, 23)}
                identifier {IDENTIFIER, "get", @(36, 27)}
                  exprFunCall
                    exprList
                      identifier {IDENTIFIER, "s", @(36, 31)}
                      identifier {IDENTIFIER, "i", @(36, 34)}
                lit
                  STRING {STRING, ""error in string literal"", @(36, 38)}
            stmtEmpty {SEMICOLON, ";", @(36, 64)}
            stmtIncr {INC, "inc", @(37, 9)}
              identifier {IDENTIFIER, "i", @(37, 13)}
        funCall
          identifier {IDENTIFIER, "printi", @(39, 5)}
          exprList
            identifier {IDENTIFIER, "fails", @(39, 12)}
        stmtEmpty {SEMICOLON, ";", @(39, 18)}
        funCall
          identifier {IDENTIFIER, "prints", @(40, 5)}
          exprList
            lit
              STRING {STRING, "" assertion failure(s) found."", @(40, 12)}
        stmtEmpty {SEMICOLON, ";", @(40, 43)}
        funCall
          identifier {IDENTIFIER, "println", @(41, 5)}
          exprList
        stmtEmpty {SEMICOLON, ";", @(41, 14)}
        funCall
          identifier {IDENTIFIER, "prints", @(42, 5)}
          exprList
            identifier {IDENTIFIER, "a", @(42, 12)}
        stmtEmpty {SEMICOLON, ";", @(42, 14)}

